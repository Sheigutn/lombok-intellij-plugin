import lombok.Getter;

public class GetterLazyMethodCall {
  @Getter(lazy=true)
  private final double[] cached = expensive();

  private double[] expensive() {
    double[] result = new double[1000000];
    for (int i = 0; i < result.length; i++) {
      result[i] = Math.asin(i);
    }
    return result;
  }

  private double[] triggerInspection() {
    return (double[]) <error descr="You should never refer to the field directly, always use the getter generated by Lombok, because the type of the field will be mangled into an AtomicReference. Do not try to directly access this AtomicReference; if it points to itself, the value has been calculated, and it is null. If the reference points to null, then the value has not been calculated. This behaviour may change in future versions. Therefore, always use the generated getter to access your field!">cached.get()</error>;
  }
}
